name: Cross Cloud Access Examples

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  TF_VAR_github_repository: ${{ github.repository }}
  TF_VAR_github_repository_owner: ${{ github.repository_owner }}
  TF_VAR_aws_region: ${{ vars.AWS_REGION }}
  TF_VAR_google_project_id: ${{ vars.GOOGLE_PROJECT_ID }}
  TF_VAR_gcp_identity_pool: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_POOL }}
  TF_VAR_google_cloud_region: ${{ vars.GOOGLE_CLOUD_REGION }}
  TF_VAR_azure_subscription_id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  TF_VAR_azure_resource_group_name: ${{ vars.AZURE_RESOURCE_GROUP_NAME }}
  TF_VAR_azure_resource_group_location: ${{ vars.AZURE_RESOURCE_GROUP_LOCATION }}

jobs:
  deploy-aws-lambda-to-gcp:
    name: Deploy AWS Lambda to Access GCP
    runs-on: ubuntu-latest
    timeout-minutes: 7
    permissions:
      id-token: write
      contents: read
    env:
      TF_VAR_gcp_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER_AWS_SANDBOX_01 }}
    defaults:
      run:
        shell: bash
        working-directory: aws-lambda-to-gcp

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install -r lambda/requirements.txt -t lambda/

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: GCP login
        uses: google-github-actions/auth@v2
        with:
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER_GITHUB_ACTIONS }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Apply terraform
        run: terraform apply -auto-approve

  deploy-gcp-functions-to-aws:
    name: Deploy GCP Functions to Access AWS
    runs-on: ubuntu-latest
    timeout-minutes: 7
    env:
      TF_VAR_google_cloud_region: australia-southeast2
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        shell: bash
        working-directory: gcp-functions-to-aws

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: GCP login
        uses: google-github-actions/auth@v2
        with:
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER_GITHUB_ACTIONS }}

      - name: Install terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Apply terraform
        run: terraform apply -auto-approve

  deploy-azure-job-to-gcp:
    name: Deploy Azure Job to Access GCP
    runs-on: ubuntu-latest
    timeout-minutes: 7
    permissions:
      id-token: write
      contents: read
    env:
      TF_VAR_gcp_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER_ENTRA_ID }}
      TF_VAR_docker_hub_username: ${{ secrets.DOCKER_HUB_USERNAME }}
      TF_VAR_docker_hub_access_token: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    defaults:
      run:
        shell: bash
        working-directory: azure-job-to-gcp

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: GCP login
        uses: google-github-actions/auth@v2
        with:
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER_GITHUB_ACTIONS }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Apply terraform
        run: terraform apply -auto-approve
